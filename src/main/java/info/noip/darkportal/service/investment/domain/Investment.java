package info.noip.darkportal.service.investment.domain;

import lombok.*;
import org.hibernate.annotations.Type;
import org.javamoney.moneta.Money;
import org.javamoney.moneta.function.MonetaryQueries;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import java.math.BigDecimal;
import java.util.UUID;

@Entity
@EntityListeners(AuditingEntityListener.class)      //to auto populate createdAt and updatedAt
@NoArgsConstructor(access = AccessLevel.PROTECTED)  //to be used by JPA only
@Builder                                            //to be used by business logic
@AllArgsConstructor(access = AccessLevel.PRIVATE)   //tell lombok to generate the builder pattern with private all arg constructor (see https://github.com/rzwitserloot/lombok/issues/1389)
@Getter
public class Investment {
    @Id
    @GeneratedValue
    @Type(type="org.hibernate.type.UUIDCharType")
    private UUID investmentId;
    @NonNull
    private Long principalCents;
    @NonNull
    private Long monthlyDepCents;
    /**
     * This is usually < 1*/
    @NonNull
    private BigDecimal rate;
    @NonNull
    private Integer months;
    //This is calculated field
    private Long futureValueCents;

    @CreatedDate
    private Long createdAt;
    @LastModifiedDate
    private Long updatedAt;

    private Long calculateFutureValue(Long principalCents, Long monthlyDepCents, BigDecimal rate, Integer months) {
        CurrencyUnit cad = Monetary.getCurrency("CAD");
        Money principal = Money.ofMinor(cad, principalCents);
        Money yearlyDep = Money.ofMinor(cad,monthlyDepCents * 12);
        //principal * (1+rate)^year
        Money futureValueOfPrincipal = principal.multiply(rate.add(new BigDecimal("1")).pow(months/12));
        //yearlyDep * ((1+rate)^year -1) / rate
        Money futureValueOfMonthlyDep = yearlyDep
                .multiply(
                        (BigDecimal.ONE.add(rate).pow(months/12)).subtract(BigDecimal.ONE)
                )
                .divide(rate);

        Money total = futureValueOfPrincipal.add(futureValueOfMonthlyDep)   //sum of principal and accumulated deposit
                .with(Monetary.getDefaultRounding()) ;                      //round up due to operation with real number

        return total.query(MonetaryQueries.convertMinorPart());             //return in cents
    }

    /**
     * Lombok will not generate the builder() method when it see this
     * Here we need to use a builder customized from the builder generated by lombok
     */
    public static InvestmentBuilder builder() {
        return new CustomInvestmentBuilder();
    }

    /**
     * This is my customized builder
     */
    private static class CustomInvestmentBuilder extends InvestmentBuilder {
        /**
         * Calculate future value when we build
         * */
        @Override
        public Investment build() {
            Investment investment = super.build();
            if (investment.futureValueCents == null) {
                investment.futureValueCents = investment.calculateFutureValue(investment.principalCents,
                        investment.monthlyDepCents, investment.rate, investment.months);
            }
            return investment;
        }

    }
}